/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./nike_pegasus.glb --types 
*/

import * as THREE from 'three'

import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useEffect, useRef, useState } from 'react'
import { useSnapshot } from 'valtio'
import { storeShoe } from '../../stores'
import { useRoute } from 'wouter'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Accessory_1: THREE.Mesh
    Accessory_2: THREE.Mesh
    Accessory_3: THREE.Mesh
    Body: THREE.Mesh
    Interior: THREE.Mesh
    Laces: THREE.Mesh
    Logo: THREE.Mesh
    Sole: THREE.Mesh
  }
  materials: {
    NikeShoe: THREE.MeshStandardMaterial
  }}

export function Nike(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/shoe/nike_pegasus.glb') as GLTFResult
  
  const group = useRef<THREE.Group>(null);
  const snap = useSnapshot(storeShoe);
  const [hovered, setHovered] = useState<keyof typeof snap.items | null>(null);
  const [, params] = useRoute("/item/:id");

  useFrame((state) => {
    if (!group.current) return;
    const t = state.clock.getElapsedTime();
    group.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20;
    group.current.rotation.x = Math.cos(t / 4) / 8;
    group.current.rotation.y = Math.sin(t / 4) / 8;
    group.current.position.y = (1 + Math.sin(t / 1.5)) / 10;
  });

  useEffect(() => {
    if (!params?.id) return;
    const cursor = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><g filter="url(#filter0_d)"><path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="${
      hovered ? snap.items[hovered] : "#ffffff"
    }"/></g><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/><text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em"><tspan x="35" y="63">${hovered}</tspan></text></g><defs><clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath><filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="2"/><feGaussianBlur stdDeviation="3"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>`;
    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
      hovered ? cursor : "default"
    )}'), auto`;
  }, [hovered, snap]);
  
  return (
    <group
    {...props}
    dispose={null}
    ref={group}
    onPointerOver={(e) => {
      e.stopPropagation();
      e.object instanceof THREE.Mesh && setHovered(e.object.material.name);
    }}
    onPointerOut={(e) => e.intersections.length === 0 && setHovered(null)}
    onPointerMissed={() => (storeShoe.current = null)}
    onPointerDown={(e) => {
      e.stopPropagation(); 
      e.object instanceof THREE.Mesh && (storeShoe.current = e.object.material.name);
    }}
    >
      <hemisphereLight args={[0xffffff, 0x000000, 2]} />

     
      <mesh geometry={nodes.Accessory_1.geometry}>
        <meshStandardMaterial {...materials.NikeShoe} color={snap.items.Eyelets} name="Eyelets"/>
      </mesh>
      <mesh geometry={nodes.Accessory_2.geometry}>
        <meshStandardMaterial {...materials.NikeShoe} color={snap.items["Lace Cage"]} name="Lace Cage"/>
      </mesh>
      <mesh geometry={nodes.Accessory_3.geometry}>
        <meshStandardMaterial {...materials.NikeShoe} color={snap.items.Heel} name="Heel"/>
      </mesh>
      <mesh geometry={nodes.Body.geometry}>
        <meshStandardMaterial {...materials.NikeShoe} color={snap.items.Body} name="Body"/>
      </mesh>
      <mesh geometry={nodes.Interior.geometry}>
        <meshStandardMaterial {...materials.NikeShoe} color={snap.items.Interior} name="Interior"/>
      </mesh>
      <mesh geometry={nodes.Laces.geometry}>
        <meshStandardMaterial {...materials.NikeShoe} color={snap.items.Laces} name="Laces"/>
      </mesh>
      <mesh geometry={nodes.Logo.geometry}>
        <meshStandardMaterial {...materials.NikeShoe} color="white" name="Logo"/>
      </mesh>
      <mesh geometry={nodes.Sole.geometry}>
        <meshStandardMaterial {...materials.NikeShoe} color={snap.items.Sole} name="Sole"/>
      </mesh>
    </group>
  )
}

useGLTF.preload('/models/shoe/nike_pegasus.glb')
