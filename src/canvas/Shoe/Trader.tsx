/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 ./shoe_trader.glb --types 
*/

import * as THREE from "three";
import { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations, useFBX, useKeyboardControls } from "@react-three/drei";
import { GLTF } from "three-stdlib";

import { storeState } from "../../stores"
import { useLocation } from "wouter";
import { useSnapshot } from "valtio";

type GLTFResult = GLTF & {
  nodes: {
    Wolf3D_Body001: THREE.SkinnedMesh;
    Wolf3D_Outfit_Bottom001: THREE.SkinnedMesh;
    Wolf3D_Outfit_Footwear001: THREE.SkinnedMesh;
    Wolf3D_Outfit_Top001: THREE.SkinnedMesh;
    Wolf3D_Hair001: THREE.SkinnedMesh;
    EyeLeft001: THREE.SkinnedMesh;
    EyeRight001: THREE.SkinnedMesh;
    Wolf3D_Head001: THREE.SkinnedMesh;
    Wolf3D_Teeth001: THREE.SkinnedMesh;
    Hips: THREE.Bone;
  };
  materials: {
    ["Wolf3D_Body.004"]: THREE.MeshStandardMaterial;
    ["Wolf3D_Outfit_Bottom.004"]: THREE.MeshStandardMaterial;
    ["Wolf3D_Outfit_Footwear.004"]: THREE.MeshStandardMaterial;
    ["Wolf3D_Outfit_Top.004"]: THREE.MeshStandardMaterial;
    ["Wolf3D_Hair.004"]: THREE.MeshStandardMaterial;
    ["Wolf3D_Eye.004"]: THREE.MeshStandardMaterial;
    ["Wolf3D_Skin.004"]: THREE.MeshStandardMaterial;
    ["Wolf3D_Teeth.004"]: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const { scene } = useGLTF(
    "/models/shoe_trader/shoe_trader-transformed.glb"
  ) as GLTFResult;
  const [sub] = useKeyboardControls();
  const [, setLocation] = useLocation();
  const { shoe_menu } = useSnapshot(storeState);
  const animations = {
    "Sitting Idle": useFBX("/anims/sittingIdle.fbx").animations[0],
  };

  animations["Sitting Idle"].name = "Sitting Idle";

  const { actions, mixer } = useAnimations(Object.values(animations), group);

  const [currentAnim, setCurrentAnim] =
    useState<keyof typeof animations>("Sitting Idle");

  function handler() {
    setCurrentAnim("Sitting Idle");
  }
  
  useEffect(() => {
    mixer.addEventListener("finished", handler);
    return () => {
      mixer.removeEventListener("finished", handler);
    };
  }, [currentAnim]);

  useEffect(() => {
    return sub(
      (state) => state["show_shoe"],
      (pressed) => {
        if (shoe_menu && pressed) {
          storeState.shoe_menu = false;
          setLocation("/item/02");
        }
      }
    );
  }, [shoe_menu]);

  useEffect(() => {
    if (currentAnim && actions && actions[currentAnim]) {
      if (currentAnim !== "Sitting Idle") {
        actions[currentAnim]!.repetitions = 1;
        actions[currentAnim]!.clampWhenFinished = true;
      }

      actions[currentAnim]!.reset().play();
    }

    return () => {
      actions[currentAnim]?.stop();
    };
  }, [currentAnim, actions]);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={scene} />
      <mesh
          position={[0, 0, 1.2]}
          scale={0.3}
          onPointerEnter={(e) => {
            if (currentAnim !== "Sitting Idle" || e.distance > 4) return;
            storeState.shoe_menu = true;
          }}
          onPointerLeave={(e) => {
            if (currentAnim !== "Sitting Idle" || e.distance > 4) return;
            storeState.shoe_menu = false;
          }}
        >
          <sphereGeometry args={[1, 1, 2]} />
          <meshBasicMaterial visible={false} />
        </mesh>
    </group>
  );
}

useGLTF.preload("/models/shoe_trader/shoe_trader-transformed.glb");
